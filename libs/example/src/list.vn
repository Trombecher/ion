trait Iterable<T, I: Iterator<T>> {
    pub fn iter(this) -> I;
}

trait ToString {
    fn to_string(this) -> str;
}

trait Iterator<Item> {
    fn next(this) -> Item?;
}

struct<T> ListNode(value: T, next: ListNode<T>?);

pub struct<T> List(start: ListNode<T>?);

impl<T> List<T> {
    pub fn new() -> This<T> {
        This(());
    }

    pub fn len(this) -> num {
        let mut len = 0;
        let mut next = this.start;

        while next {
            next = next.next;
            leb += 1;
        }

        len;
    }

    pub fn last(this) -> T? {
        let mut last = this.start;

        while last?.next {
            last = last.next;
        }

        last?.value
    }

    pub fn append(this, value: T) {
        let mut last = this.start;

        while last?.next {
            last = last.next;
        }

        last.next = ListNode(value, ());
    }

    pub fn clear(this) {
        this.start = ();
    }
}

impl<T> Iterable<T, Iter<T>> for List<T> {
    fn iter(this) -> Iter<T> {
        Iter(this.start)
    }
}

pub struct<T> Iter(next: ListNode<T>?);

impl<T> Iterator<T> for Iter<T> {
    fn next(this) -> T? {
        if this.next {
            this.next = this.next.next;
            value
        } else {
            ()
        }
    }
}